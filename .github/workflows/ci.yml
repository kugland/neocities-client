on:
  push:
    branches:
      - "master"
      - "devel"
    tags:
      - "v*.*.*"
  pull_request:

env:
  RUST_BACKTRACE: 1

jobs:
  sanity-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Version sanity checks
        run: |
          set -eu -o pipefail

          CARGO_VER="v$(sed -En '/^\s*version\s*=\s*"([^"]+)"$/{s//\1/; p}' Cargo.toml)"
          echo "‚û°Ô∏è Cargo.toml version: $CARGO_VER"

          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            TAG_VER="$(sed -E 's|^refs/tags/||' <<< "${{ github.ref }}")"
            if [[ "$CARGO_VER" != "$TAG_VER" ]]; then
              echo "üö® Tag version ($TAG_VER) doesn‚Äôt match version in Cargo.toml ($CARGO_VER)"
              exit 1
            fi
            echo "‚úÖ Tag version: $TAG_VER"
          fi

          LAST_MSG="$(git log --pretty=%s | sed -En '/^v[0-9]+\.[0-9]+\.[0-9]+$/{p;q}' || true)"
          if [[ -n "$LAST_MSG" ]]; then
            if [[ "$CARGO_VER" != "$LAST_MSG" ]]; then
              echo "üö® Last commit msg ($LAST_MSG) doesn‚Äôt match version in Cargo.toml ($CARGO_VER)"
              exit 1
            fi
            echo "‚úÖ Last commit message version: $LAST_MSG"
          fi
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - run: cargo fmt --all -- --check
      - run: cargo check --locked
      - run: cargo clippy --all-targets --all-features -- --deny warnings

  msrv:
    needs: sanity-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Find MSRV
        id: find-msrv
        run: |
          MSRV="$(sed -En '/^rust-version = /{s///;s/"//g;p}' Cargo.toml)"
          echo "MSRV=$MSRV" >> "$GITHUB_OUTPUT"
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.find-msrv.outputs.MSRV }}
      - run: cargo build --locked --release

  tests:
    needs: msrv
    name: "${{ matrix.platform.target }} / ${{ matrix.toolchain }}"
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macOS-latest
            target: x86_64-apple-darwin
        toolchain:
          - stable
          - nightly
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.platform.target, 'musl')
      - name: Build library
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--locked"
      - name: Run tests
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "test"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--locked --no-fail-fast"

  release:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
        if: startsWith( github.ref, 'refs/tags/v' )
